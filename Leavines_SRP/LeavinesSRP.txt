For assignment 2 I wrote a program that implements a Shift-Reduce Parser. The way I did is by first creating a public class for Lexer, and private strings for both the lex and the tok to use as get set statements for public strings Lexe and TKN that way it will display both the lever and the tokens after the user makes his/her input when the program is running. The way I was able to implement the list of lever and tokens after the user finishes making his/her input is by creating a while loop to make sure that the string is empty, and in the while loop is a series of if then else statements identifying the variables typed by the user as id, (, ), *, or + as shown in the token category. For example, if the user types num1 and hits enter, the program will display num1:id. 

After creating the Lexer, Iâ€™ve created both an action and Goto table. For the action, I have created it to where the positive numbers represent the shift sequence and the negative numbers represent the reduce sequence including 100, which represents accept when the Parsing steps are completed. For the Goto table, I have created it in a similar fashion as the Action table but without the negative numbers and declared the integer values which I assigned to 0 while declaring the ETF as a string setting it to NULL. Then I created a boolean for the right parenthesis to be added once it is removed, and did the same thing for the left parenthesis but only checks to see if it was deleted instead. 

Once I had those implemented, I created a series of lists to keep track on what is currently happening in the parsing sequence for the stack, the stack trace, and the parsing steps. Then to make sure that the rows and columns do not equal the accept value, I created a while loop for it, and once I did that, I created another series of if then else statements for both the SHIFT and REDUCE sequences. In detail for the REDUCE sequence, I wrote a line of code to make sure that the left parenthesis will be deleted by setting it to true in the else if statement that is nested inside the else if statement for REDUCE. Then to make sure that the right parenthesis was deleted and if the left parenthesis is being deleted, I wrote an if statement nested inside the for loop that is nested inside the else if for REDUCE, that sets the right parenthesis to be true, and to make sure that there is a reset if left parenthesis is deleted or not, I set it to false. Also, the way I made sure that the right parenthesis is added, I created another if statement nested inside the else if for REDUCE saying if the right parenthesis is true, then set the right parenthesis to false. 

Then once I have finished implementing what was needed for the Shift-Reduce Parser, I wrote two for loops for both the Parsing Steps and the Stack in the appropriate order so that way the data for them will be properly displayed after the user makes his/her input as shown in the example for the homework assignment.   